{
    "contents" : "library(plyr)\n\nlibrary(ggplot2)\nlibrary(gridExtra)\nlibrary(scales)\nlibrary(reshape)\nlibrary(xtable)\nlibrary(ggthemes)\n# \n# \n myTheme <- theme_stata() +\n#myTheme <- theme_bw() +\n\n  theme(legend.position =    \"bottom\",\n        #plot.margin =        unit(c(3, 3, 3, 3), \"lines\"),\n        axis.title.y = element_text(vjust = .6),\n        text =               element_text(family=\"sans\",face = \"plain\",\n                                          colour = \"black\", size = 8,\n                                          hjust = 0.5, vjust = 0.5, angle = 0, lineheight = 0.9),\n        axis.text.y =       element_text(angle = 0),\n        panel.margin =       unit(0.25, \"lines\"),\n        panel.grid.major = element_line(colour=\"#dedede\", size = 0.2,linetype = \"dotted\"),\n        panel.grid.minor = element_line(colour=\"#dedede\", size = 0.1,linetype = \"dotted\"),\n        axis.text.x=element_text(angle=-30, hjust=-.1,vjust=1,size=6)\n        )\n\ntheme_set(myTheme)\n\nsetwd(\"M:/Dropbox/MyFiles/Projects/AWR-Mining-Reboot/Versions/2.9\")\n# source(file=\"custom-packages.R\")\n\n\n\n\nmain <- new.env()\n\n\n#date_break_major_var <- date_breaks(\"1 hour\")\ndate_break_major_var <- date_breaks(\"1 day\")\n#date_break_minor_var <- date_breaks(\"1 hour\")\ndate_break_minor_var <- date_breaks(\"12 hour\")\n\n\n\n\n\nmain$avg_max_colors <- c(\"Avg\" = \"#1F77B4\", \"Max\" = \"#D62728\", \n                          \"OS CPU Avg\" = \"#1F77B4\", \"OS CPU Max\" = \"#D62728\")\n\nmain$gg_avg_max_fill <- scale_fill_manual(\"\", values = main$avg_max_colors) \nmain$gg_avg_max_color <- scale_colour_manual(\"\", values = main$avg_max_colors)\n\n#vert_line_snap_ids <- data.frame(db_name=\"PSPROD\",snap_id=240)\n#vert_line_snap_ids <- rbind(vert_line_snap_ids, data.frame(db_name=\"PSPRODDB\",snap_id=4798))\n#vert_line_snap_ids <- rbind(vert_line_snap_ids, data.frame(db_name=\"PSPRODDB\",snap_id=479))\n\n\n#vert_line <- theme()\n# vert_line <- geom_vline(xintercept=c(as.vector(as.POSIXct('12/11/23 10:38', format = \"%y/%m/%d %H:%M\")),\n#                                      as.vector(as.POSIXct('12/11/23 14:52', format = \"%y/%m/%d %H:%M\"))\n#                                      ), linetype=\"dotted\",color=\"#ff513a\",size=0.5,alpha=0.5)\n\nvert_line <- geom_vline(xintercept=c(as.vector(as.POSIXct('13/01/15 19:59', format = \"%y/%m/%d %H:%M\")),\n                                     as.vector(as.POSIXct('13/01/16 16:00', format = \"%y/%m/%d %H:%M\")),\n                                     as.vector(as.POSIXct('13/01/17 06:00', format = \"%y/%m/%d %H:%M\"))\n                                     ), linetype=\"dotted\",color=\"#ff513a\",size=0.5,alpha=0.5)\n\n#geom_vline(xintercept=as.vector(DF_SNAP_ID_DATE[with(DF_SNAP_ID_DATE,SNAP_ID == 10795),]$end), linetype=\"dotted\",color=\"#ff513a\",size=0.5,alpha=0.5)\n\n# vert_line <- geom_vline(xintercept=c(as.vector(main$DF_SNAP_ID_DATE[with(main$DF_SNAP_ID_DATE,snap == 10795),]$end),\n#                                      as.vector(main$DF_SNAP_ID_DATE[with(main$DF_SNAP_ID_DATE,snap == 10815),]$end),\n#                                      as.vector(main$DF_SNAP_ID_DATE[with(main$DF_SNAP_ID_DATE,snap == 10829),]$end)\n#                                      ), linetype=\"dotted\",color=\"#ff513a\",size=0.5,alpha=0.5)\n\n\n#WORK_DIR <- 'M:/Dropbox/MyFiles/Code Samples/SQL Tuning/AWR Mining/AWR-Mining-Reboot/CSVs'\n#WORK_DIR <- 'M:/Dropbox/MyFiles/Accounts/S&L/NC/Public Schools/Pearson/AWRs/CSVs'\n#WORK_DIR <- 'M:/Dropbox/MyFiles/Accounts/S&L/OH/Jobs and Family Services/AWR-Miner/Dev/CSVs'\nWORK_DIR <- 'E:/Portable-AWR-Miner/CSVs'\n#WORK_DIR <- 'M:/Dropbox/MyFiles/Accounts/S&L/OH/State Teachers Retirement/AWR-Mining/CSVs'\n#WORK_DIR <- 'M:/Dropbox/MyFiles/Accounts/Federal/DLA/Accenture-SAP/AWR-Mining/CSVs'\n#WORK_DIR <- 'M:/Dropbox/MyFiles/Accounts/Federal/DLA/Accenture-SAP/AWR-Mining/awr/CSVs'\n#WORK_DIR <- 'M:/Dropbox/MyFiles/Accounts/S&L/NC/Public Schools/Pearson/Pearson-POV/Results/Test-C/raw-data/CSVs'\n#WORK_DIR <- 'M:/Dropbox/MyFiles/Accounts/S&L/NC/Public Schools/Pearson/Pearson-POV/Results/Test-H/CSVs'\n#WORK_DIR <- 'M:/Dropbox/MyFiles/Accounts/Commercial/Unknown/Kurt Vogel/CSVs'\n#WORK_DIR <- 'M:/Dropbox/MyFiles/Accounts/S&L/MN/State of Minnesota MMB/Peoplesoft-POV/CSVs'\n#WORK_DIR <- 'M:/Dropbox/MyFiles/Accounts/S&L/MI/MI Dept of Technology, Mgt and Budget/QA-DR/CSVs'\n#WORK_DIR <- 'E:/Temp/Hichwa-Exadata-Tests/CSVs'\n#WORK_DIR <- 'M:/Dropbox/MyFiles/Accounts/Federal/Census/Decennial/Decennial-POV/AWR-Miner/35-State-Run-Test2/CSVs'\n\n\n\n\n\nMAX_DAYS <- 32\n#remove(INSTANCE_FILTER)\n#INSTANCE_FILTER <- c(3,4)\n\nsetwd(WORK_DIR)\n\n\n#os_files <- list.files(pattern=\"^ZG1-.*os.csv$\")\n#os_files <- list.files(pattern=\"^APPSPROD.*os.csv$\")\n\n#os_files <- list.files(pattern=\"EBS-2045810607-os.csv\")\nos_files <- list.files(pattern=\"^*.*os.csv$\")\n#os_files <- list.files(pattern=\"^PM1.+-os.csv\")\n#os_files <- list.files(pattern=\"^EFNP.+-os.csv\")\n\n# colors from Color Inspiration book, p30, \"coal tar\"\ncolours <- c(\"#2F295F\",\"#FC4723\", \"#288CF8\", \"#FC2346\", \"#F7DE28\",\"#BBB509\",\"#C03360\")\n\n\n\n# main$gg_bottom_panel <- opts(legend.position = \"bottom\",legend.direction = \"horizontal\",legend.width=unit(20,\"cm\"),\n#                         panel.background = theme_rect(colour = \"#aaaaaa\"))\n\nmain$db_name = vector()\nmain$db_id = vector()\nfor (f in os_files) {\n  #list(c(unlist(LL),5:9))\n  #db_name <- list(c(unlist(db_name),gsub(pattern = \"awr-wl-([a-zA-Z0-9_]+).*\", replacement=\"\\\\1\", f)))\n  main$db_name <- c(main$db_name,gsub(pattern = \"([a-zA-Z0-9_]+)-.*\", replacement=\"\\\\1\", f))\n  main$db_id <- c(main$db_id,gsub(pattern = \"([a-zA-Z0-9_]+)-([0-9]+).*\", replacement=\"\\\\2\", f))\n  #print(main$db_name)\n}\n\n#main$db_name <- unique(main$db_name)\nmain$db_id <- unique(main$db_id)\n\n#print(db_name)\n#print(db_id)\n\nlog_it <- function(x){\n  print(x)\n}\n\nconvert_snap_id_to_posixct <- function(snapID){\n  theDateChar <- subset(main$DF_SNAP_ID_DATE2 , snap==snapID)\n  theDateReturn <- as.POSIXct(theDateChar$end, format = \"%y/%m/%d %H:%M\")\n  return(theDateReturn)\n}\n\n\nget_attrs <- function(SEARCH_VAL){\n  if(nrow(subset(main$current_plot_attributes, variable==SEARCH_VAL)) == 0){\n    return(NA)\n  }\n  else{\n    return(main$current_plot_attributes[with(main$current_plot_attributes,variable==SEARCH_VAL),])\n  }\n}\n\nattr <- new.env()\nattr$filter_snap_min <- 1\nattr$filter_snap_max <- 1000000000\nattr$vertical_line <- theme()\nattr$vertical_text <- theme()\n\napply_current_attributes <- function(){\n\n  ## Filter by snap ID\n  if(nrow(main$current_plot_attributes) > 0){\n    DF_TEMP <- NULL\n    DF_TEMP <- get_attrs('snap_id_filter')\n    if(length(DF_TEMP)>0){\n      if(length(DF_TEMP$value1)>0){ \n        attr$filter_snap_min <- as.vector(DF_TEMP$value1) }\n      if(length(DF_TEMP$value2)>0){ \n        attr$filter_snap_max <- as.vector(DF_TEMP$value2) }\n      #attr$filter_snap_max <- as.vector(DF_TEMP$value2)\n    }\n  }\n  \n  ## Filter by date\n  \n  \n  \n  return(TRUE)\n}\n\nadd_vetical_lines <- function(){\n  if(nrow(main$current_plot_attributes) > 0){\n    DF_TEMP <- NULL\n    DF_TEMP <- get_attrs('annotated_line')\n    V_VERT_VECT <- numeric(0)\n    DF_VERT_TEXT <- data.frame()\n    for (i in 1:nrow(DF_TEMP)){\n      if(length(DF_TEMP[i,]$value1)>0){\n        theDate <- DF_TEMP[i,]$value1\n        theNumbers <- grepl(\"^[[:digit:]]+$\", theDate) \n        print(theNumbers)\n        #if(as.numeric(theDate) > 0){\n        if(theNumbers){\n          theDate <- convert_snap_id_to_posixct(theDate)\n        }\n        else{\n          #theDate <- c(as.vector(as.POSIXct(theDate, format = \"%y/%m/%d %H:%M\")))\n          theDate <- as.POSIXct(theDate, format = \"%y/%m/%d %H:%M\")\n        }\n        \n        V_VERT_VECT <- c(V_VERT_VECT, theDate)\n        \n        if(length(DF_TEMP[i,]$value2)>0){\n          DF_VERT_TEXT <- rbind(DF_VERT_TEXT,data.frame(end=theDate,label=DF_TEMP[i,]$value2))\n        }\n      }\n    }\n    \n    \n    if(length(V_VERT_VECT)>0){\n      attr$vertical_line <- geom_vline(xintercept=V_VERT_VECT, linetype=\"dotted\",color=\"#555555\",size=0.2,alpha=0.5)}\n    \n    if(length(DF_VERT_TEXT)>0){\n      attr$vertical_text <- geom_text(aes(x=end,label=label,y=0), data=DF_VERT_TEXT,angle=90,size=1.5,hjust=0,vjust=-0.2,alpha=0.5,color=\"#555555\")}\n  }\n}\n\nbuild_data_frames <- function(dbid,dbname) {\n  log_it(\"build_data_frames - start\")\n  log_it(paste0(\"dbid-dbname: \",dbid,dbname))\n#   dbid <- 1499932796\n#   dbname <- main$current_db_name\n  \n  DATA_FRAME_INT <- NULL\n  file_pattern=paste(WORK_DIR,paste(dbname,dbid,sep=\"-\"),sep=\"/\")\n  DF_OS_INT <- read.csv(paste(file_pattern,\"-os.csv\",sep=\"\"), head=TRUE,sep=\",\",stringsAsFactors=FALSE)\n  DF_MAIN_INT <- read.csv(paste(file_pattern,\"-main.csv\",sep=\"\"), head=TRUE,sep=\",\",stringsAsFactors=TRUE)\n  DF_MEMORY_INT <- read.csv(paste(file_pattern,\"-memory.csv\",sep=\"\"), head=TRUE,sep=\",\",stringsAsFactors=TRUE)\n  DF_SPACE_INT <- read.csv(paste(file_pattern,\"-space.csv\",sep=\"\"), head=TRUE,sep=\",\",stringsAsFactors=TRUE)\n  DF_AAS_INT <- read.csv(paste(file_pattern,\"-aas.csv\",sep=\"\"), head=TRUE,sep=\",\",stringsAsFactors=FALSE)\n  \n  print(summary(DF_AAS_INT))\n  \n  DF_SQL_SUMMARY_INT <- read.csv(paste(file_pattern,\"-sql-summary.csv\",sep=\"\"), head=TRUE,sep=\",\",stringsAsFactors=TRUE)\n  DF_SQL_BY_SNAPID_INT <- read.csv(paste(file_pattern,\"-sql-by-snap.csv\",sep=\"\"), head=TRUE,sep=\",\",stringsAsFactors=TRUE)\n  \n  #DF_MAIN_INT$end <- strptime(DF_MAIN_INT$end, \"%y/%m/%d %H:%M\")\n  DF_MAIN_INT$end <- as.POSIXct(DF_MAIN_INT$end, format = \"%y/%m/%d %H:%M\")\n  \n  # Normalize dates by snap_id\n  \n  DF_SNAP_ID_DATE_INT <- ddply(DF_MAIN_INT, .(snap), summarise, \n                               end=min(as.POSIXct(end)))\n  \n  \n  filter_n_days <- function(DF_IN){\n#    filter_snap_min \n    return(subset(DF_IN, SNAP_ID >= attr$filter_snap_min & SNAP_ID <= attr$filter_snap_max))\n  }\n  \n  \n  \n  names(DF_SNAP_ID_DATE_INT)[names(DF_SNAP_ID_DATE_INT)==\"snap\"] <- \"SNAP_ID\"\n  DF_SNAP_ID_DATE_INT <- subset(DF_SNAP_ID_DATE_INT, SNAP_ID >= attr$filter_snap_min & SNAP_ID <= attr$filter_snap_max)\n  \n  \n  DF_MAIN_INT <- subset(DF_MAIN_INT, snap >= attr$filter_snap_min & snap <= attr$filter_snap_max)\n  DF_AAS_INT<-filter_n_days(DF_AAS_INT)\n  DF_MEMORY_INT<-filter_n_days(DF_MEMORY_INT)\n  DF_SQL_BY_SNAPID_INT<-filter_n_days(DF_SQL_BY_SNAPID_INT)\n  \n  DF_AAS_INT <- merge(DF_AAS_INT,DF_SNAP_ID_DATE_INT)\n  DF_MEMORY_INT <- merge(DF_MEMORY_INT,DF_SNAP_ID_DATE_INT)\n  DF_SQL_BY_SNAPID_INT <- merge(DF_SQL_BY_SNAPID_INT,DF_SNAP_ID_DATE_INT)\n  #print(head(DF_AAS_INT))\n  DF_AAS_INT[with(DF_AAS_INT, grepl(\"DB CPU\", WAIT_CLASS)),]$WAIT_CLASS<-\"CPU\"\n  # due to a bug in the 2.7 sql script\n  #DF_AAS_INT[with(DF_AAS_INT, grepl(\"Administrati\", WAIT_CLASS)),]$WAIT_CLASS<-\"Administrative\"\n\n  min_snap_id <- min(subset(DF_MAIN_INT, end >= max(DF_MAIN_INT$end)-as.difftime(MAX_DAYS, unit=\"days\"))$snap)\n  #DF_MAIN_INT <- subset(DF_MAIN_INT, end >= max(DF_MAIN_INT$end)-as.difftime(MAX_DAYS, unit=\"days\"))\n  # tyler changed for Pearson\n  \n  print(summary(DF_AAS_INT))\n  \n  #print(head(DF_OS_INT))\n  log_it(\"build_data_frames - end\")\n  return(list(DF_OS_INT,DF_MAIN_INT,DF_MEMORY_INT,DF_SPACE_INT,DF_AAS_INT,DF_SQL_SUMMARY_INT,DF_SQL_BY_SNAPID_INT,DF_SNAP_ID_DATE_INT))\n}\n\n#foo<- build_data_frames(main$db_id,main$db_name)\n\ngenerate_hours_bars <- function(DF_MAIN_INT){\n  log_it('generate_hours_bars - start')\n  #DF_MAIN_INT <- main$DF_MAIN\n  DF_NIGHT_HOURS_INT <- data.frame(\"end\"= unique(as.POSIXlt(strptime(format(DF_MAIN_INT$end,\"%y/%m/%d\"),format=\"%y/%m/%d\"))))\n  \n  DF_NIGHT_HOURS_INT_A <- DF_NIGHT_HOURS_INT\n  DF_NIGHT_HOURS_INT_A$work_start <- DF_NIGHT_HOURS_INT_A$end + 1\n  DF_NIGHT_HOURS_INT_A$work_stop <- DF_NIGHT_HOURS_INT_A$work_start + ((3600*7)-1)\n  \n  DF_NIGHT_HOURS_INT_B <- DF_NIGHT_HOURS_INT\n  DF_NIGHT_HOURS_INT_B$work_start <- DF_NIGHT_HOURS_INT_B$end + (3600*19)\n  DF_NIGHT_HOURS_INT_B$work_stop <- DF_NIGHT_HOURS_INT_B$end + ((3600*24)-1)\n  \n  DF_NIGHT_HOURS_INT_A <- rbind(DF_NIGHT_HOURS_INT_A, DF_NIGHT_HOURS_INT_B)\n  \n  # find date ranges outside of the filtered min and max and REMOVE them\n  idx_date_min_rm <- !with(DF_NIGHT_HOURS_INT_A, work_stop < min(main$DF_SNAP_ID_DATE$end))\n  DF_NIGHT_HOURS_INT_A<- DF_NIGHT_HOURS_INT_A[idx_date_min_rm,]\n  idx_date_max_rm <- !with(DF_NIGHT_HOURS_INT_A, work_start > max(main$DF_SNAP_ID_DATE$end))\n  DF_NIGHT_HOURS_INT_A<- DF_NIGHT_HOURS_INT_A[idx_date_max_rm,]\n  # find remaining date ranges outside of the filtered min and max and CHANGE them\n  idx_date_min <- with(DF_NIGHT_HOURS_INT_A, work_start < min(main$DF_SNAP_ID_DATE$end))\n  DF_NIGHT_HOURS_INT_A$work_start[idx_date_min] <- min(main$DF_SNAP_ID_DATE$end)\n  idx_date_max <- with(DF_NIGHT_HOURS_INT_A, work_stop > max(main$DF_SNAP_ID_DATE$end))\n  DF_NIGHT_HOURS_INT_A$work_stop[idx_date_max] <- max(main$DF_SNAP_ID_DATE$end)\n  \n  DF_NIGHT_HOURS_INT_A$value <- 0\n  \n  hour_bars <- geom_rect(data=DF_NIGHT_HOURS_INT_A,aes(xmin=work_start,xmax=work_stop,ymin=-Inf,ymax=Inf),alpha=0.1,fill=\"#bdd1e6\")\n  log_it('generate_hours_bars - end')\n  return(hour_bars)\n}\n\ngenerate_snap_id_labels <- function(DF_SNAP_ID_DATE_INT){\n  #DF_SNAP_ID_DATE_INT <- DF_SNAP_ID_DATE\n  log_it('generate_snap_id_labels - start')\n  num_dates <- as.numeric(nrow(DF_SNAP_ID_DATE_INT))\n  num_snap_ids <- min(num_dates,40)\n  \n  mod_num <- round(num_dates/num_snap_ids)\n  \n  DF_SNAP_ID_SUBSET_INT <- subset(DF_SNAP_ID_DATE_INT,(SNAP_ID %% mod_num)==0,rownames=FALSE)\n  log_it('generate_snap_id_labels - end')\n  return(DF_SNAP_ID_SUBSET_INT)\n}\n\nget_os_stat <- function(SEARCH_VAL){\n  #print(paste('start get_os_stat',SEARCH_VAL,sep=\" - \"))\n  if(nrow(subset(main$DF_OS, STAT_NAME==SEARCH_VAL)) == 0){\n    #print('if get_os_stat')\n    return(NA)\n  }\n  else{\n    #print('else get_os_stat')\n    return(as.numeric(as.vector(main$DF_OS[with(main$DF_OS,STAT_NAME == SEARCH_VAL),]$STAT_VALUE)))\n  }\n}\n\nget_os_stat_string <- function(SEARCH_VAL){\n  if(nrow(subset(main$DF_OS, STAT_NAME==SEARCH_VAL)) == 0)\n    return(NULL)\n  else\n    return(as.character(as.vector(main$DF_OS[with(main$DF_OS,STAT_NAME == SEARCH_VAL),]$STAT_VALUE)))\n}\n\n\nload_plot_attributes <- function(){\n  #main$attributes_file \n  DF_ATTRIBUTES_INT <- data.frame()\n  log_it('load_plot_attributes - start')\n  if(file.exists('attributes.csv')){\n    DF_ATTRIBUTES_INT <- read.csv('attributes.csv', head=TRUE,sep=\",\",stringsAsFactors=FALSE)\n    DF_ATTRIBUTES_INT <- subset(DF_ATTRIBUTES_INT, db == main$current_db_name)\n    print(head(DF_ATTRIBUTES_INT))\n    \n  }\n  \n  log_it('load_plot_attributes - end')\n  \n  return(DF_ATTRIBUTES_INT)\n}\n\n\ngenerate_plot_attributes <- function(){\n  \n  log_it('generate_plot_attributes - start')\n  \n  df_plot_attr_int <- NULL\n  \n  add_df_row <- function(df,attr,val1,val2){\n    df<-rbind(df,data.frame(db=main$current_db_name,variable=attr,value1=val1,value2=val2))\n    return(df)\n  }\n  \n\n  df_plot_attr_int <- add_df_row(df_plot_attr_int,'$date_range',format(min(main$DF_SNAP_ID_DATE$end),\"%Y-%m-%d %H:%M:%S\"),format(max(main$DF_SNAP_ID_DATE$end),\"%Y-%m-%d %H:%M:%S\"))\n  df_plot_attr_int <- add_df_row(df_plot_attr_int,'$snap_id_range',as.character(min(main$DF_SNAP_ID_DATE$SNAP_ID)),as.character(max(main$DF_SNAP_ID_DATE$SNAP_ID)))\n  #df_plot_attr_int <- add_df_row(df_plot_attr_int,'date_filter','','')\n  df_plot_attr_int <- add_df_row(df_plot_attr_int,'snap_id_filter','','')\n  \n  #df_plot_attr_int <- add_df_row(df_plot_attr_int,'comments','','')\n  df_plot_attr_int <- add_df_row(df_plot_attr_int,'annotated_line','','')\n  #print(head(df_plot_attr_int))\n  \n  log_it('generate_plot_attributes - end')\n  return(df_plot_attr_int)\n}\n\n\n\nsave_plot_attributes <- function(){\n  #main$attributes_file\n  #file.exists(file_name)\n  \n}\n\n\n':=' = function(lhs, rhs) {\n  frame = parent.frame()\n  lhs = as.list(substitute(lhs))\n  if (length(lhs) > 1)\n    lhs = lhs[-1]\n  if (length(lhs) == 1) {\n    do.call(`=`, list(lhs[[1]], rhs), envir=frame)\n    return(invisible(NULL)) }\n  if (is.function(rhs) || is(rhs, 'formula'))\n    rhs = list(rhs)\n  if (length(lhs) > length(rhs))\n    rhs = c(rhs, rep(list(NULL), length(lhs) - length(rhs)))\n  for (i in 1:length(lhs))\n    do.call(`=`, list(lhs[[i]], rhs[[i]]), envir=frame)\n  return(invisible(NULL)) \n}\n\n\nsummarise_dfs_by_snap <- function(){\n  log_it('summarise_dfs_by_snap - start')\n  DF_MAIN_BY_SNAP_INT <- ddply(main$DF_MAIN, .(end), summarise, \n                        cpu=max(os_cpu_max),\n                        read_iops=sum(read_iops),\n                        read_iops_max=sum(read_iops_max),\n                        write_iops=sum(write_iops),\n                        write_iops_max=sum(write_iops_max),\n                        read_mb_s=sum(read_mb_s),\n                        read_mb_s_max=sum(read_mb_s_max),\n                        write_mb_s=sum(write_mb_s),\n                        write_mb_s_max=sum(write_mb_s_max),\n                        aas=sum(aas),\n                        logons_total=sum(logons_total),\n                        exec_s=sum(exec_s),\n                        sql_res_t_cs=sum(sql_res_t_cs)\n                               )\n  log_it('summarise_dfs_by_snap - end')\n  return(list(DF_MAIN_BY_SNAP_INT))\n}\n\n\nplot_io <- function(DF_MAIN_BY_SNAP_INT){\n  log_it('plot_io - start')\n  DF_MAIN_INT2 <- DF_MAIN_BY_SNAP_INT\n  x.melt <- melt(DF_MAIN_INT2, id.var = c(\"end\"), measure.var = c(\"read_iops\", \"read_iops_max\",\"write_iops\", \"write_iops_max\",\n                                                                \"read_mb_s\",\"read_mb_s_max\",\"write_mb_s\",\"write_mb_s_max\"))\n  # add a \"stat\" column so we can facet by stat for avg-max\n  x.melt$stat <- \"Avg\"  \n  idx_max <- with(x.melt, grepl(\"max\", variable))\n  x.melt[idx_max,]$stat <- \"Max\"  \n  x.melt$value <- round(x.melt$value)\n  # We need to change these names and they are \"factors\" which we can't change\n  x.melt <- transform(x.melt, variable = as.character(variable))\n  \n  x.melt[with(x.melt, grepl(\"read_iops\", variable)),]$variable<-\"Read IOPs\"\n  x.melt[with(x.melt, grepl(\"write_iops\", variable)),]$variable<-\"Write IOPs\"\n  x.melt[with(x.melt, grepl(\"read_mb_s\", variable)),]$variable<-\"Read MB/s\"\n  x.melt[with(x.melt, grepl(\"write_mb_s\", variable)),]$variable<-\"Write MB/s\"\n  \n  \n  DF_VAR_INT <- data.frame(unique(x.melt$variable))\n  DF_SNAP_ID_SUBSET2 <- merge(DF_VAR_INT,main$DF_SNAP_ID_SUBSET)\n  \n  vals <- expand.grid(end = unique(DF_SNAP_ID_SUBSET2$end),\n                      variable = unique(x.melt$variable))\n  \n  DF_SNAP_ID_SUBSET2 <- merge(vals,main$DF_SNAP_ID_SUBSET)\n  \n  DF_SNAP_ID_SUBSET3 <- main$DF_SNAP_ID_SUBSET\n  x.melt$variable <- factor(x.melt$variable)\n  #DF_AAS_INT2$WAIT_CLASS <- factor(DF_AAS_INT2$WAIT_CLASS)\n  last_level <- as.character(levels(x.melt$variable)[length(levels(x.melt$variable))])\n  DF_SNAP_ID_SUBSET3$variable <- last_level\n  \n  # get the max vals for each day\n  \n  max_vals <- ddply(x.melt, .(variable,stat,format(end,\"%y/%m/%d\")), subset, subset = rank(-value) <= 1)\n  max_vals$label <- formatC(max_vals$value, format=\"d\", big.mark=\",\")\n  \n  p <- ggplot(data=x.melt, aes(x=end, y=value),aes(color=stat),alpha=0.5) +\n    geom_line(aes(color=stat), size=.2,alpha=0.5)+\n    #stat_smooth(method = \"loess\",n=300,size=.2,alpha=.1,linetype=\"dashed\",\n          #      aes(color=stat,fill=stat))+\n                  #scale_colour_few()+\n                  #scale_fill_few()+\n                  main$gg_avg_max_fill+main$gg_avg_max_color+\n                  geom_point(data=max_vals, aes(x=end, y=value, fill=stat), size=2, shape=21)+\n                  geom_text(data=max_vals, aes(x=end, y=value, color=stat,label=label),size=2.5, vjust=0.5, hjust=1.25)+\n                  geom_text(data=DF_SNAP_ID_SUBSET3,aes(x=end,y=0,label=SNAP_ID),angle=-20,size=1.5,hjust=-0.1,vjust=0.7,alpha=0.2)+\n                  geom_point(data=DF_SNAP_ID_SUBSET3,aes(x=end,y=0),alpha=0.2,size=1)+\n                  ylab('')+\n                  \n                  facet_grid(variable ~ .,scales=\"free_y\")+\n                  #opts(axis.title.x  = theme_blank())+\n                  #opts(plot.margin = unit(c(.1,.1,.1,.1), \"cm\"),panel.background = theme_rect(colour = \"#aaaaaa\"))+\n                  scale_y_continuous(labels=comma)+\n                  xlim(min(x.melt$end),max(x.melt$end))+\n                  #opts(axis.title.x  = theme_blank())+\n                  labs(title=paste(\"IO Avg and Max by IO Type for \",main$current_db_name,sep=\"\"))+\n                  main$gg_hour_bars+\n                  attr$vertical_line + attr$vertical_text +\n#                   opts(axis.text.x=theme_text(angle=-30, hjust=-.1,vjust=1,size=6))+\n#                   opts(panel.grid.major = theme_line(\"#eeeeee\", size = 0.2,linetype = \"dotted\"))+\n#                   opts(panel.grid.minor = theme_line(\"#efefef\", size = 0.1,linetype = \"dotted\"))+\n    #ylim(0,max(max_vals$value))+\n                  scale_x_datetime(labels = date_format(\"%a, %b %d %I%p\"),breaks = date_break_major_var,\n                                   minor_breaks = date_break_minor_var,\n                                   limits = c(min(x.melt$end),max(x.melt$end)))\n                                     #main$gg_bottom_panel\n  \n  #p\n  \n  p_gt <- ggplot_gtable(ggplot_build(p))\n  p_gt$layout$clip[p_gt$layout$name==\"panel\"] <- \"off\"\n  log_it('plot_io - end')\n  return(p_gt)\n  #}\n}\n\n\n\nplot_cpu <- function(DF_MAIN_INT){\n  log_it('plot_cpu - start')\n  #if(dim(DF_MAIN_INT)[1] > 2){\n  #DF_MAIN_INT <- DF_MAIN\n  #browser()\n  DF_INST_INT <- data.frame(unique(DF_MAIN_INT$inst))\n  DF_SNAP_ID_SUBSET2 <- merge(DF_INST_INT,main$DF_SNAP_ID_SUBSET)\n  \n  vals <- expand.grid(end = unique(main$DF_SNAP_ID_SUBSET$end),\n                      inst = unique(DF_MAIN_INT$inst))\n  \n  DF_SNAP_ID_SUBSET2 <- merge(vals,main$DF_SNAP_ID_SUBSET)\n  \n  x.melt <- melt(DF_MAIN_INT, id.var = c(\"end\",\"inst\"), measure.var = c(\"os_cpu\", \"os_cpu_max\"))\n  x.melt$variable<-gsub( \"os_cpu_max\" , \"OS CPU Max\" , x.melt$variable)\n  x.melt$variable<-gsub( \"os_cpu\" , \"OS CPU Avg\" , x.melt$variable)\n  \n  # get the max vals for each day\n  max_vals <- ddply(x.melt, .(variable,inst,format(end,\"%y/%m/%d\")), subset, subset = rank(-value) <= 1)\n  max_vals$label <- formatC(max_vals$value, format=\"d\", big.mark=\",\")\n  \n  \n  \n  p <- ggplot(data=x.melt, aes(x=end, y=value),aes(group=variable,color=variable),alpha=0.3) +\n    geom_line(aes(group=variable,color=variable), size=.2)+\n    stat_smooth(method = \"loess\",n=300,size=.2,alpha=.1,linetype=\"dashed\",\n                aes(group=variable,color=variable,fill=variable))+\n                  ylab('CPU Percent')+\n                  ylim(0,115)+\n                  geom_point(data=max_vals, aes(x=end, y=value, fill=variable), size=2, shape=21)+\n                  geom_text(data=max_vals, aes(x=end, y=value, color=variable,label=label),size=3, vjust=-.8, hjust=1.5)+\n                  geom_text(data=DF_SNAP_ID_SUBSET2,aes(x=end,y=0,label=SNAP_ID),angle=-45,size=1.5,hjust=-.5,alpha=0.2)+\n                  geom_point(data=DF_SNAP_ID_SUBSET2,aes(x=end,y=0),alpha=0.2,size=1)+\n                  facet_grid(inst ~ .)+\n                  theme(axis.title.x  = element_blank())+\n                  theme(panel.background = element_rect(colour = \"#777777\"))+\n                  xlim(min(x.melt$end),max(x.melt$end))+\n                  labs(title=paste(\"CPU Avg and Max by Instance for \",main$current_db_name,sep=\"\"))+\n                  main$gg_hour_bars+\n                  attr$vertical_line + attr$vertical_text +\n                   #scale_x_datetime(labels = date_format(\"%a, %b %d %I %p\"),breaks = date_breaks(\"2 hour\"),\n                   scale_x_datetime(labels = date_format(\"%a, %b %d %I %p\"),breaks = date_break_major_var,\n                                    minor_breaks = date_break_minor_var,\n                                    limits = c(min(x.melt$end),max(x.melt$end)))+\n                                      main$gg_avg_max_fill+main$gg_avg_max_color\n                                    # theme(axis.text.x=element_text(angle=-30, hjust=-.1,vjust=1,size=6))\n                                     #theme(panel.grid.major = element_line(\"#eeeeee\", size = 0.2,linetype = \"dotted\"))+\n                                     #theme(panel.grid.minor = element_line(\"#efefef\", size = 0.1,linetype = \"dotted\"))\n                                     #main$gg_bottom_panel\n  \n  #p\n   p_gt <- ggplot_gtable(ggplot_build(p))\n  log_it('plot_cpu - end')\n#   p_gt$layout$clip[p_gt$layout$name==\"panel\"] <- \"off\"\n   return(p_gt)\n  #}\n}\n\n\n\nplot_aas_chart <- function(DF_AAS_INT){\n  log_it('plot_aas_chart - start')\n  log_it(min(DF_AAS_INT$end))\n  log_it(max(DF_AAS_INT$end))\n  \n  log_it(min(main$DF_SNAP_ID_SUBSET$end))\n  log_it(max(main$DF_SNAP_ID_SUBSET$end))\n  #browser()\n  #DF_AAS_INT <- DF_AAS\n  \n  #print(unique(main$DF_AAS$WAIT_CLASS))\n  DF_AAS_INT$WAIT_CLASS <- factor(DF_AAS_INT$WAIT_CLASS,c(\"Other\",\"Cluster\",\"Queueing\",\"Network\",\"Administrative\",\"Configuration\",\"Commit\",\"Application\",\"Concurrency\",\"System I/O\",\"User I/O\",\"Scheduler\",\"CPU\"))\n  \n  \n  vals <- expand.grid(end = unique(DF_AAS_INT$end),\n                      WAIT_CLASS = unique(DF_AAS_INT$WAIT_CLASS))\n  DF_AAS_INT <- merge(vals,DF_AAS_INT)\n  \n  \n  DF_AAS_INT[is.na(DF_AAS_INT)] <- 0\n  \n  \n  \n  aas_colors <- c(\"Administrative\" = \"#6c6e69\", \"Application\" = \"#bf2a05\", \"Cluster\" = \"#ccc4af\", \"Commit\" = \"#e36a05\",\n                  \"Concurrency\" = \"#8a1b07\",\"Configuration\" = \"#5a4611\",\"CPU\" = \"#05cc04\",\"Network\" = \"#9b9b7a\",\n                  \"Other\" = \"#f06fad\",\"Scheduler\" = \"#97f797\",\"Queuing\" = \"#c4b69c\",\n                  \"System I/O\" = \"#0993de\",\"User I/O\" = \"#054ae1\")\n  \n  gg_aas_colors <- scale_fill_manual(\"\", values = aas_colors)\n  \n  \n  DF_AAS_SUM_INT <- ddply(DF_AAS_INT, .(SNAP_ID,end), summarise,AVG_SESS=sum(AVG_SESS))\n  \n  # get the max vals for each day\n  max_vals <- ddply(DF_AAS_SUM_INT, .(format(end,\"%y/%m/%d\")), subset, subset = rank(-AVG_SESS) <= 1)\n    \n  sess_quantile <- quantile(DF_AAS_SUM_INT$AVG_SESS,0.99)\n  cpu_cores_line <- geom_hline(yintercept=as.numeric(main$cpu_cores), linetype=\"dotted\",color=\"red\",size=0.7,alpha=0.4)\n  df_cpu_cores_label <- data.frame(end=min(min(DF_AAS_INT$end)),AVG_SESS=main$cpu_cores)\n  \n  ymax <- max(c(main$cpu_cores+(main$cpu_cores*0.2),(max(DF_AAS_SUM_INT$AVG_SESS)+(max(DF_AAS_SUM_INT$AVG_SESS)*0.2))))\n  \n  plot_aas_wait_class <- ggplot()+\n    geom_area(data=DF_AAS_INT, aes(x = end, y = AVG_SESS,\n                                   fill = WAIT_CLASS),stat = \"identity\", position = \"stack\",alpha=.95)+\n                                     gg_aas_colors+\n                                     theme(axis.title.x  = element_blank(),axis.title.y  = element_blank(),\n                                           legend.key.size =    unit(0.6, \"lines\"))+\n                                     labs(title=paste(\"Average Active Sessions (AAS) for \",main$current_db_name,sep=\"\"))+\n                                     main$gg_hour_bars+\n                                     geom_point(data=max_vals, aes(x=end, y=AVG_SESS), size=2, shape=21)+\n                                     geom_text(data=max_vals, aes(x=end, y=AVG_SESS,label=AVG_SESS),size=3, vjust=-.8, hjust=1.5)+\n                                     geom_text(data=main$DF_SNAP_ID_SUBSET,aes(x=end,y=0,label=SNAP_ID),angle=-20,size=1.5,alpha=0.2,hjust=-0.1,vjust=0.7)+                                     \n                                     geom_point(data=main$DF_SNAP_ID_SUBSET,aes(x=end,y=0),alpha=0.2,size=1,vjust=1,hjust=0)+\n                                     cpu_cores_line+\n                                     attr$vertical_line + attr$vertical_text +\n                                     geom_text(data=df_cpu_cores_label, aes(x=end, y=AVG_SESS,label=paste0(\"CPU Cores - \",main$cpu_cores)),size=2, vjust=-.8, hjust=.5,color=\"red\",alpha=0.4)+\n  scale_x_datetime(breaks=NULL) \n  #                                      scale_x_datetime(labels = date_format(\"%a, %b %d %I%p\"),breaks = date_breaks(\"1 days\"),\n#                                                       minor_breaks = date_breaks(\"12 hour\"),\n#                                                       limits = c(min(DF_AAS_INT$end),max(DF_AAS_INT$end))\n#                                                       )\n                                                      #ylim(-(ymax*0.025),ymax)\n  \n\n  plot_aas_wait_class_gt <- ggplot_gtable(ggplot_build(plot_aas_wait_class))\n  \n  sess_quantile2 <- quantile(DF_AAS_INT$AVG_SESS,probs=c(0.95),type=4)\n  \n  DF_AAS_INT2 <- subset(DF_AAS_INT,AVG_SESS >= sess_quantile2[[1]],rownames=FALSE,stringsasfactors=TRUE)\n  DF_AAS_INT2$WAIT_CLASS <- factor(DF_AAS_INT2$WAIT_CLASS,c(\"Other\",\"Cluster\",\"Queueing\",\"Network\",\"Administrative\",\"Configuration\",\"Commit\",\"Application\",\"Concurrency\",\"System I/O\",\"User I/O\",\"Scheduler\",\"CPU\"))\n  \n  \n  DF_AAS_INT2 <- droplevels(DF_AAS_INT2)\n  # get the max vals for each day\n  max_vals2 <- ddply(DF_AAS_INT2, .(format(end,\"%y/%m/%d\"),WAIT_CLASS), subset, subset = rank(-AVG_SESS) <= 1)\n  DF_SNAP_ID_SUBSET2 <- main$DF_SNAP_ID_SUBSET\n  #DF_AAS_INT2$WAIT_CLASS <- factor(DF_AAS_INT2$WAIT_CLASS)\n  last_level <- as.character(levels(DF_AAS_INT2$WAIT_CLASS)[length(levels(DF_AAS_INT2$WAIT_CLASS))])\n  DF_SNAP_ID_SUBSET2$WAIT_CLASS <- last_level\n  ymax2 <- max(c(main$cpu_cores+(main$cpu_cores*0.2),(max(DF_AAS_INT2$AVG_SESS)+(max(DF_AAS_INT2$AVG_SESS)*0.2))))\n  \n  \n  plot_aas_wait_class2_line <- ggplot()+\n    geom_line(data=DF_AAS_INT2, aes(x = end, y = AVG_SESS,color=WAIT_CLASS),stat = \"identity\",alpha=1,size=.7) +\n    scale_color_manual(\"\", values = aas_colors)+\n    geom_point(data=max_vals2, aes(x=end, y=AVG_SESS), size=2, shape=21)+\n    geom_text(data=max_vals2, aes(x=end, y=AVG_SESS,label=AVG_SESS),size=3, vjust=-.4, hjust=1)+\n    #facet_grid(WAIT_CLASS ~ . )+\n    main$gg_hour_bars+\n    attr$vertical_line + attr$vertical_text +\n    scale_x_datetime(labels = date_format(\"%a, %b %d %I%p\"),breaks = date_break_major_var,\n                     minor_breaks = date_break_minor_var\n                     #limits = c(min(DF_AAS_INT2$end),max(DF_AAS_INT2$end))\n                     )+\n                       theme(axis.title.x  = element_blank(),axis.title.y  = element_blank())+\n                       #opts(panel.background = theme_rect(colour = \"#777777\"))+\n                       labs(title=paste(paste(\"Average Active Sessions by Wait Class - \",main$current_db_name,sep=\"\"),\"\\n Only Values >= 95th Percentile\",sep=\"\"))+\n                       geom_text(data=DF_SNAP_ID_SUBSET2,aes(x=end,y=0,label=SNAP_ID),angle=-20,size=1.5,alpha=0.2,hjust=-0.15,vjust=2.2)+\n                       geom_point(data=DF_SNAP_ID_SUBSET2,aes(x=end,y=0),alpha=0.2,size=1,vjust=1,hjust=0)+\n                       #ylim(0,ymax2)+\n                       theme(legend.position=\"right\")\n  \n  plot_aas_wait_class2 <- plot_aas_wait_class2_line+\n    facet_grid(WAIT_CLASS ~ . )+theme(legend.position=\"none\")\n  \n  plot_aas_wait_class2_line <- plot_aas_wait_class2_line+cpu_cores_line\n  \n  plot_aas_wait_class2_gt <- ggplot_gtable(ggplot_build(plot_aas_wait_class2))\n  plot_aas_wait_class2_gt$layout$clip[plot_aas_wait_class2_gt$layout$name==\"panel\"] <- \"off\"\n  #print(plot_aas_wait_class_gt)\n  #grid.draw(plot_aas_wait_class2_gt)\n  log_it('plot_aas_chart - end')\n  return(list(plot_aas_wait_class_gt,plot_aas_wait_class2_gt,plot_aas_wait_class2_line))\n  \n  \n}\n\n\n\nplot_main_activity <- function(DF_MAIN_INT){\n  log_it('plot_main_activity - start')\n  #if(dim(DF_MAIN_INT)[1] > 2){\n  #DF_MAIN_INT<-DF_MAIN\n  \n  DF_MAIN_INT2 <- ddply(DF_MAIN_INT, .(end), summarise, \n                        aas=sum(aas),\n                        aas_max=sum(aas_max),\n                        sql_res_t_cs=sum(sql_res_t_cs),\n                        logons_s=sum(logons_s),\n                        logons_total=sum(logons_total),\n                        exec_s=sum(exec_s),\n                        hard_p_s=sum(hard_p_s),\n                        commits_s=sum(commits_s))\n  #db_block_gets_s=sum(db_block_gets_s),\n  #db_block_changes_s=sum(db_block_changes_s))\n  \n  x.melt <- melt(DF_MAIN_INT2, id.var = c(\"end\"), measure.var = c(\"aas\", \"aas_max\",\"sql_res_t_cs\", \"logons_s\",\n                                                                  \"logons_total\",\"exec_s\",\"hard_p_s\",\"commits_s\"))\n  #\"db_block_gets_s\",\"db_block_changes_s\"))\n  \n  x.melt$value <- round(x.melt$value,2)\n  # We need to change these names and they are \"factors\" which we can't change\n  x.melt <- transform(x.melt, variable = as.character(variable))\n  \n  x.melt[with(x.melt, grepl(\"aas_max\", variable)),]$variable<-\"AAS Max\"\n  x.melt[with(x.melt, grepl(\"aas\", variable)),]$variable<-\"AAS\"\n  x.melt[with(x.melt, grepl(\"sql_res_t_cs\", variable)),]$variable<-\"SQL Resp (cs)\"\n  x.melt[with(x.melt, grepl(\"logons_s\", variable)),]$variable<-\"Logons/s\"\n  x.melt[with(x.melt, grepl(\"logons_total\", variable)),]$variable<-\"Logons Total\"\n  x.melt[with(x.melt, grepl(\"exec_s\", variable)),]$variable<-\"Execs/s\"\n  x.melt[with(x.melt, grepl(\"commits_s\", variable)),]$variable<-\"Commits/s\"\n  x.melt[with(x.melt, grepl(\"hard_p_s\", variable)),]$variable<-\"Hard Parses/s\"\n  #x.melt[with(x.melt, grepl(\"db_block_gets_s\", variable)),]$variable<-\"Block Gets/s\"\n  #x.melt[with(x.melt, grepl(\"db_block_changes_s\", variable)),]$variable<-\"Block Changes/s\"\n  \n  x.melt$variable <- factor(x.melt$variable)\n  \n  x.melt <- data.frame(x.melt,stringsAsFactors =TRUE)\n  DF_VAR_INT <- data.frame(unique(x.melt$variable))\n  DF_SNAP_ID_SUBSET2 <- merge(DF_VAR_INT,main$DF_SNAP_ID_SUBSET)\n  \n  vals <- expand.grid(end = unique(DF_SNAP_ID_SUBSET2$end),\n                      variable = unique(x.melt$variable))\n  \n  DF_SNAP_ID_SUBSET2 <- merge(vals,main$DF_SNAP_ID_SUBSET)\n  \n  # dummy value to adjust scales of aas to match aax_max\n  \n  \n  x.melt <- na.omit(x.melt)\n  \n  last_level <- as.character(levels(x.melt$variable)[length(levels(x.melt$variable))])\n  DF_SNAP_ID_SUBSET2$variable <- last_level\n  \n  DF_SNAP_ID_SUBSET2$variable <- factor(DF_SNAP_ID_SUBSET2$variable)\n  \n  if(nrow(subset(x.melt, variable==\"AAS\")) == 0){\n    gg_aas_max_max <- opts()\n  }  else {\n    df_aas_max_max <- data.frame(end=min(x.melt$end),variable=\"AAS\",value=max(subset(x.melt, variable == \"AAS Max\")$value),stringsAsFactors =TRUE)\n    gg_aas_max_max <- geom_point(data=df_aas_max_max,aes(x=end,y=value),alpha=0)\n  }\n  \n  max_vals <- ddply(x.melt, .(variable,format(end,\"%y/%m/%d\")), subset, subset = rank(-value) <= 1)\n  max_vals$label <- formatC(max_vals$value, digits=2,format=\"fg\", big.mark=\",\")\n  \n  p <- ggplot() +\n    geom_line(data=x.melt,aes(x=end, y=value,color=variable), size=.2)+\n   # stat_smooth(data=x.melt,aes(x=end, y=value),method = \"loess\",n=300,size=.2,linetype=\"dashed\",alpha=0.2)+\n    geom_point(data=max_vals, aes(x=end, y=value, fill=variable), size=2, shape=21)+\n    geom_text(data=max_vals, aes(x=end, y=value, color=variable,label=label),size=2.5, vjust=0.5, hjust=1.6)+\n    ylab('')+\n    facet_grid(variable ~ .,scales=\"free_y\")+\n    scale_y_continuous(labels=comma)+\n    xlim(min(x.melt$end),max(x.melt$end))+\n    theme(axis.title.x  = element_blank(),legend.position=\"none\")+\n    labs(title=paste(\"Main Activity Variables for \",main$current_db_name,sep=\"\"))+\n    geom_text(data=DF_SNAP_ID_SUBSET2,aes(x=end,y=0,label=SNAP_ID),angle=-20,size=1.5,hjust=-0.15,vjust=2.8,color=\"#bbbbbb\",alpha=0.1)+\n    geom_point(data=DF_SNAP_ID_SUBSET2,aes(x=end,y=0),alpha=0.2,size=1,vjust=1,hjust=0,color=\"#999999\",alpha=0.1)+\n    main$gg_hour_bars+\n    gg_aas_max_max +\n    attr$vertical_line + attr$vertical_text +\n    scale_x_datetime(labels = date_format(\"%a, %b %d %I%p\"),breaks = date_break_major_var,\n                     minor_breaks = date_break_minor_var,\n                     limits = c(min(x.melt$end),max(x.melt$end)))\n                       #scale_colour_tableau(\"colorblind10\")+scale_fill_tableau(\"colorblind10\")\n                      \n  \n  p_gt <- ggplot_gtable(ggplot_build(p))\n  p_gt$layout$clip[p_gt$layout$name==\"panel\"] <- \"off\"\n  log_it('plot_main_activity - end')\n  #grid.draw(p_gt)\n  return(p_gt)\n  \n  \n}\n\n\n\n\nplot_RAC_activity <- function(DF_MAIN_INT){\n  log_it('plot_RAC_activity - start')\n  #if(dim(DF_MAIN_INT)[1] > 2){\n  #DF_MAIN_INT<-main$DF_MAIN\n\n  \n  DF_MAIN_INT2 <- ddply(DF_MAIN_INT, .(end,inst), summarise, \n                        gc_cr_rec_s=sum(gc_cr_rec_s),\n                        gc_cu_rec_s=sum(gc_cu_rec_s),\n                        gc_cr_get_cs=mean(gc_cr_get_cs),\n                        gc_cu_get_cs=mean(gc_cu_get_cs),\n                        gc_bk_corrupted=sum(gc_bk_corrupted),\n                        gc_bk_lost=sum(gc_bk_lost))\n  #db_block_gets_s=sum(db_block_gets_s),\n  #db_block_changes_s=sum(db_block_changes_s))\n  \n  x.melt <- melt(DF_MAIN_INT2, id.var = c(\"end\",\"inst\"), measure.var = c(\"gc_cr_rec_s\", \"gc_cu_rec_s\",\"gc_cr_get_cs\", \"gc_cu_get_cs\",\n                                                                  \"gc_bk_corrupted\",\"gc_bk_lost\"))\n  #\"db_block_gets_s\",\"db_block_changes_s\"))\n  \n  x.melt$value <- round(x.melt$value,2)\n  # We need to change these names and they are \"factors\" which we can't change\n  x.melt <- transform(x.melt, variable = as.character(variable))\n  \n  x.melt[with(x.melt, grepl(\"gc_cr_rec_s\", variable)),]$variable<-\"GC CR Block Rec /s\"\n  x.melt[with(x.melt, grepl(\"gc_cu_rec_s\", variable)),]$variable<-\"GC Current Block Rec /s\"\n  x.melt[with(x.melt, grepl(\"gc_cr_get_cs\", variable)),]$variable<-\"GC Avg CR Get cs\"\n  x.melt[with(x.melt, grepl(\"gc_cu_get_cs\", variable)),]$variable<-\"GC Avg Current Get cs\"\n  x.melt[with(x.melt, grepl(\"gc_bk_corrupted\", variable)),]$variable<-\"GC Blocks Corrupted\"\n  x.melt[with(x.melt, grepl(\"gc_bk_lost\", variable)),]$variable<-\"GC Blocks Lost\"\n\n  #x.melt[with(x.melt, grepl(\"db_block_gets_s\", variable)),]$variable<-\"Block Gets/s\"\n  #x.melt[with(x.melt, grepl(\"db_block_changes_s\", variable)),]$variable<-\"Block Changes/s\"\n  \n  x.melt$variable <- factor(x.melt$variable)\n  x.melt$inst <- factor(x.melt$inst)\n  \n  x.melt <- data.frame(x.melt,stringsAsFactors =TRUE)\n  DF_VAR_INT <- data.frame(unique(x.melt$variable))\n  DF_SNAP_ID_SUBSET2 <- merge(DF_VAR_INT,main$DF_SNAP_ID_SUBSET)\n  \n  vals <- expand.grid(end = unique(DF_SNAP_ID_SUBSET2$end),\n                      variable = unique(x.melt$variable))\n  \n  DF_SNAP_ID_SUBSET2 <- merge(vals,main$DF_SNAP_ID_SUBSET)\n  \n  # dummy value to adjust scales of aas to match aax_max\n  \n  \n  x.melt <- na.omit(x.melt)\n  \n  last_level <- as.character(levels(x.melt$variable)[length(levels(x.melt$variable))])\n  DF_SNAP_ID_SUBSET2$variable <- last_level\n  \n  DF_SNAP_ID_SUBSET2$variable <- factor(DF_SNAP_ID_SUBSET2$variable)\n  \n#   if(nrow(subset(x.melt, variable==\"AAS\")) == 0){\n#     gg_aas_max_max <- opts()\n#   }  else {\n#     df_aas_max_max <- data.frame(end=min(x.melt$end),variable=\"AAS\",value=max(subset(x.melt, variable == \"AAS Max\")$value),stringsAsFactors =TRUE)\n#     gg_aas_max_max <- geom_point(data=df_aas_max_max,aes(x=end,y=value),alpha=0)\n#   }\n  \n  max_vals <- ddply(x.melt, .(variable,inst,format(end,\"%y/%m/%d\")), subset, subset = rank(-value) <= 1)\n  max_vals$label <- formatC(max_vals$value, digits=2,format=\"fg\", big.mark=\",\")\n  \n  p <- ggplot() +\n    geom_line(data=x.melt,aes(x=end, y=value,color=inst,group=inst), size=.2,alpha=0.8)+\n#     stat_smooth(data=x.melt,aes(x=end, y=value),method = \"loess\",n=300,size=.2,linetype=\"dashed\",alpha=0.2)+\n     geom_point(data=max_vals, aes(x=end, y=value, fill=inst,group=inst), size=2, shape=21)+\n     geom_text(data=max_vals, aes(x=end, y=value, color=inst,label=label,group=inst),size=2.5, vjust=0.5, hjust=1.6)+\n#     ylab('')+\n     facet_grid(variable ~ .,scales=\"free_y\")+\n     scale_y_continuous(labels=comma)+\n     xlim(min(x.melt$end),max(x.melt$end))+\n     #theme(axis.title.x  = element_blank(),legend.position=\"none\")+\n    theme(text =               element_text(size = 6))+\n     labs(title=paste(\"Global Cache Attributes for \",main$current_db_name,sep=\"\"))+\n     geom_text(data=DF_SNAP_ID_SUBSET2,aes(x=end,y=0,label=SNAP_ID),angle=-20,size=1.5,hjust=-0.15,vjust=2.8,color=\"#bbbbbb\",alpha=0.1)+\n     geom_point(data=DF_SNAP_ID_SUBSET2,aes(x=end,y=0),alpha=0.2,size=1,vjust=1,hjust=0,color=\"#999999\",alpha=0.1)+\n     main$gg_hour_bars+\n     #gg_aas_max_max +\n     attr$vertical_line + attr$vertical_text +\n    scale_x_datetime(labels = date_format(\"%a, %b %d %I%p\"),breaks = date_break_major_var,\n                     minor_breaks = date_break_minor_var,\n                     limits = c(min(x.melt$end),max(x.melt$end)))\n  #scale_colour_tableau(\"colorblind10\")+scale_fill_tableau(\"colorblind10\")\n  \n  \n  p_gt <- ggplot_gtable(ggplot_build(p))\n  p_gt$layout$clip[p_gt$layout$name==\"panel\"] <- \"off\"\n  log_it('plot_RAC_activity - end')\n  #grid.draw(p_gt)\n  return(p_gt)\n  \n  \n}\n\n#foo<-plot_RAC_activity(main$DF_MAIN)\n\n\n\nplot_memory <- function(DF_MEMORY_INT){\n  log_it('plot_memory - start')\n  #if(dim(DF_MAIN_INT)[1] > 2){\n  #DF_MEMORY_INT <- main$DF_MEMORY\n  #browser()\n  \n  DF_MEMORY_INT_SUM <- ddply(DF_MEMORY_INT, .(end,SNAP_ID), summarise, \n                             SGA=sum(SGA),\n                             PGA=sum(PGA),\n                             TOTAL=sum(TOTAL))\n  \n  #DF_MEMORY_INT_SUM$end <- as.POSIXlt(DF_MEMORY_INT_SUM$end)\n  \n  # get the max vals for each day\n  max_vals <- ddply(DF_MEMORY_INT_SUM, .(end_new = as.character(end,format=\"%y/%m/%d\",tx=\"GMT\")), transform, \n                  rank = rank(-TOTAL, ties.method = \"first\"))\n  max_vals <- subset(max_vals,rank <=1)\n  \n  \n  max_vals$label <- prettyNum(max_vals$TOTAL, big.mark=\",\")\n  \n  line_labels <- data.frame(end=DF_MEMORY_INT_SUM$end[[nrow(DF_MEMORY_INT_SUM)]], \n                            SGA=DF_MEMORY_INT_SUM$SGA[[nrow(DF_MEMORY_INT_SUM)]],\n                            PGA=DF_MEMORY_INT_SUM$PGA[[nrow(DF_MEMORY_INT_SUM)]])\n  \n  p <- ggplot(data=DF_MEMORY_INT_SUM, aes(x=end, y=TOTAL)) +\n    geom_area(fill=\"#3694d1\",alpha=0.2)+\n    geom_point(data=max_vals, aes(x=end, y=TOTAL), size=2, shape=21)+\n    geom_text(data=max_vals, aes(x=end, y=TOTAL,label=label),size=3, vjust=-.8, hjust=1.5)+\n    geom_line(aes(x=end,y=SGA),color=\"#c0392b\",size=1)+\n    geom_text(data=line_labels,aes(x=end, y=SGA,label=\"SGA\"),color=\"#c0392b\",size=3, vjust=-.8, hjust=1.5)+\n    geom_line(aes(x=end,y=PGA),color=\"#47b850\",size=1)+\n    geom_text(data=line_labels,aes(x=end, y=PGA,label=\"PGA\"),color=\"#47b850\",size=3, vjust=-.8, hjust=1.5)+\n    theme(axis.title.x  = element_blank())+\n    #opts(plot.margin = unit(c(.1,.1,.1,.1), \"cm\"),panel.background = theme_rect(colour = \"#777777\"))+\n    labs(title=paste(\"Total Memory Usage in GB for \",main$current_db_name,sep=\"\"))+\n    #main$gg_hour_bars+\n    attr$vertical_line + attr$vertical_text +\n    scale_x_datetime(labels = date_format(\"%a, %b %d\"),breaks = date_break_major_var,\n                     minor_breaks = date_break_minor_var,\n                     limits = c(min(DF_MEMORY_INT_SUM$end),max(DF_MEMORY_INT_SUM$end)))\n                       #opts(axis.text.x=theme_text(angle=-30, hjust=-.1,vjust=1,size=6))+\n                       #opts(panel.grid.major = theme_line(\"#eeeeee\", size = 0.2,linetype = \"dotted\"))+\n                       #opts(panel.grid.minor = theme_line(\"#efefef\", size = 0.1,linetype = \"dotted\"))\n  \n  p\n  log_it('plot_memory - end')\n  return(p)\n  #}\n}\n\ngen_summary_data <- function(){\n  log_it('gen_summary_data - start')\n  ptile <- 0.95\n  #MAX_MEM <- as.vector(quantile(main$DF_MEMORY$TOTAL,probs=c(ptile),type=4))\n\n  \n  DF_MEM_TOTALS <- ddply(main$DF_MEMORY, .(SNAP_ID), summarise, \n                         SGA=sum(SGA), PGA=sum(PGA),TOTAL=sum(TOTAL))\n\n  \n  DF_MAIN_INT_SUM1 <- ddply(main$DF_MAIN,.(snap), summarise,\n                           cpu    = max(os_cpu_max),\n                           read_iops = sum(read_iops_max), write_iops = sum(write_iops_max),\n                           read_mb_s = sum(read_mb_s_max), write_mb_s = sum(write_mb_s_max),\n                            logons_total=sum(logons_total),exec_s=sum(exec_s),commits_s=sum(commits_s),\n                            aas=sum(aas))\n\n  DF_MAIN_INT_SUM <- ddply(DF_MAIN_INT_SUM1,.(), summarise,\n                          cpu    = max(cpu),\n                          r_iops = max(read_iops), w_iops = max(write_iops),\n                          r_mb_s = max(read_mb_s), w_mb_s = max(write_mb_s),\n                           logons_total = max(logons_total), exec_s = max(exec_s),\n                           commits_s = max(commits_s), aas = max(aas)\n                           )\n  \n  # round the whole data frame\n  numVars <- sapply(DF_MAIN_INT_SUM, is.numeric)\n  DF_MAIN_INT_SUM[numVars] <- lapply(DF_MAIN_INT_SUM[numVars], round, digits = 0)\n  \n  num_instances <- as.numeric(as.vector(get_os_stat(\"INSTANCES\")))\n  print(paste('instances: ',num_instances,sep=''))\n  #DF_OS_INT <- data.frame(name=main$current_db_name,nodes=num_instances)\n  DF_OS_INT <- data.frame(name=main$current_db_name,nodes=num_instances,\n                 platform=get_os_stat_string(\"PLATFORM_NAME\"),version=get_os_stat_string(\"VERSION\"),\n                 sockets=ifelse(is.na(get_os_stat(\"NUM_CPU_SOCKETS\")) == TRUE, NA, get_os_stat(\"NUM_CPU_SOCKETS\")*num_instances),\n                          #sockets=(get_os_stat(\"NUM_CPU_SOCKETS\")*get_os_stat(\"INSTANCES\")),\n                  #sockets=(get_os_stat(\"NUM_CPU_SOCKETS\")*get_os_stat(\"INSTANCES\")),\n                  cores=(get_os_stat(\"NUM_CPU_CORES\")*num_instances),\n                  threads=(get_os_stat(\"NUM_CPUS\")*num_instances),\n                  mem=(get_os_stat(\"PHYSICAL_MEMORY_GB\") * num_instances)\n                          )\n  \n  DF_OTHER_INT <- data.frame(\n                          sga=as.numeric(as.vector(max(DF_MEM_TOTALS$SGA))),pga=as.numeric(as.vector(max(DF_MEM_TOTALS$PGA))),\n                          memused=as.numeric(as.vector(max(DF_MEM_TOTALS$TOTAL))),\n                          sizegb=as.numeric(as.vector(max(main$DF_SPACE$SIZE_GB))))\n  # round the whole data frame\n  numVars <- sapply(DF_OTHER_INT, is.numeric)\n  DF_OTHER_INT[numVars] <- lapply(DF_OTHER_INT[numVars], round, digits = 0)\n  \n  \n  DF_SUM_COMBINED_INT <- merge(DF_MAIN_INT_SUM,DF_OTHER_INT)\n  DF_SUM_COMBINED_INT$.id <- NULL\n  DF_OS_INT$.id <- NULL\n  \n  DF_HOSTS <- data.frame(hosts=get_os_stat_string(\"HOSTS\"))\n  DF_SUM_COMBINED_INT2 <- merge(DF_OS_INT,DF_SUM_COMBINED_INT)\n  DF_SUM_COMBINED_INT2 <- merge(DF_SUM_COMBINED_INT2,DF_HOSTS)\n  \n  DF_SUM_COMBINED_INT$.id <- NULL\n  \n  #df_temp <- summary_df_iostat_by_time_int\n  #summary_df_iostat_by_time_int[-1] <- round(df_temp[-1],1) # round all but the 1st column\n  #remove(df_temp)\n  \n  #overall_summary_df <- rbind(overall_summary_df, summary_df_totals)\n  #overall_combined_df <- rbind(overall_combined_df, summary_df_cluster_by_snap_id)\n  log_it('gen_summary_data - end')\n  return(list(DF_OS_INT,DF_SUM_COMBINED_INT,DF_SUM_COMBINED_INT2))\n  \n}\n\n# plot_sql_summary <- function(DF_SQL_SUMMARY_INT){\n#   \n#   ggplot(data=DF_SQL_SUMMARY,aes(x=ELAP_RANK,y=EXEC_RANK))+geom_point()+geom_smooth()\n#   ggplot(data=DF_SQL_SUMMARY,aes(x=ELAP_RANK,y=LOG_READS_RANK))+geom_point()+geom_smooth()\n#   ggplot(data=DF_SQL_SUMMARY,aes(x=ELAP_RANK,y=PHYS_READS_RANK))+geom_point()+geom_smooth()\n#   ggplot(data=DF_SQL_SUMMARY,aes(x=ELAP_RANK,y=EXEC_RANK))+geom_point()+geom_smooth()\n#   cor(DF_SQL_SUMMARY[4:7] )\n#   plotmatrix(with(DF_SQL_SUMMARY, data.frame(ELAP_RANK, EXEC_RANK, LOG_READS_RANK, PHYS_READS_RANK)))\n# }\n\n# ==========================================================================\n\n\n\nplot_summary_boxplot_main <- function(){\n  log_it('plot_summary_boxplot_main - start')\n  x.melt <- melt(main$DF_MAIN_BY_SNAP, id.var = c(\"end\"), measure.var = c(\"cpu\",\"read_iops_max\", \"write_iops_max\",\n                                                                  \"read_mb_s_max\",\"write_mb_s_max\",\"aas\",\"logons_total\",\"exec_s\",\"sql_res_t_cs\"))\n  # add a \"stat\" column so we can facet by stat for avg-max\n#   x.melt$stat <- \"Avg\"  \n#   idx_max <- with(x.melt, grepl(\"max\", variable))\n#   x.melt[idx_max,]$stat <- \"Max\"\n  \n  x.melt$value <- round(x.melt$value,2)\n  # We need to change these names and they are \"factors\" which we can't change\n  x.melt <- transform(x.melt, variable = as.character(variable))\n  \n  x.melt[with(x.melt, grepl(\"cpu\", variable)),]$variable<-\"CPU\"\n  x.melt[with(x.melt, grepl(\"read_iops\", variable)),]$variable<-\"Read IOPs\"\n  x.melt[with(x.melt, grepl(\"write_iops\", variable)),]$variable<-\"Write IOPs\"\n  x.melt[with(x.melt, grepl(\"read_mb_s\", variable)),]$variable<-\"Read MB/s\"\n  x.melt[with(x.melt, grepl(\"write_mb_s\", variable)),]$variable<-\"Write MB/s\"\n  x.melt[with(x.melt, grepl(\"aas\", variable)),]$variable<-\"Avg Act Sessions\"\n  x.melt[with(x.melt, grepl(\"logons_total\", variable)),]$variable<-\"Sessions\"\n  x.melt[with(x.melt, grepl(\"exec_s\", variable)),]$variable<-\"Execs/s\"\n  x.melt[with(x.melt, grepl(\"sql_res_t_cs\", variable)),]$variable<-\"SQL Resp Time (cs)\"\n  x.melt$variable <- factor(x.melt$variable)\n  x.melt$id <- 1\n  \n  median_vals <- ddply(x.melt,.(variable),summarise, value=median(value))\n  mean_vals <- ddply(x.melt,.(variable),summarise,value=mean(value))\n  quant_low <- ddply(x.melt,.(variable),summarise,value=quantile(value,0.25,na.rm=TRUE))\n  quant_high <- ddply(x.melt,.(variable),summarise,value=quantile(value,0.75,na.rm=TRUE))\n  \n  summary_vals <- rbind(median_vals,mean_vals,quant_low,quant_high)\n  summary_vals$id <- 1\n  \n  #print(summary(x.melt))\n  #print(head(x.melt))\n  \n  \n  p <- ggplot(data=x.melt, aes(x=id, y=value),aes(fill=variable),position=\"dodge\")+\n    geom_violin(aes(),fill=\"#4DAF4A\",colour=\"#000000\",size=0.05,alpha=0.6,adjust=0.5) +\n    geom_boxplot(aes(),colour=\"#000000\",alpha=.6,show_guide=FALSE,notch = FALSE,outlier.colour = \"orange\", outlier.size = 2,outlier.alpha=.5,outlier.shape=5)+\n    geom_jitter(alpha=.3,size=1,position = position_jitter(width = .2,height=0),aes(colour=\"gray\"))+\n    geom_text(data=summary_vals,aes(y=value,label=round(value,1)),size=2,vjust=-0.8,hjust=0)+\n    facet_wrap( ~ variable,scales=\"free\",nrow=1)+\n    stat_summary(fun.y=mean, geom=\"point\", shape=5, size=4,alpha=0.7,colour=\"#D62728\")+\n    #scale_colour_brewer(palette=\"Set1\")+scale_fill_brewer(palette=\"Set1\")+\n    #scale_y_continuous(breaks=seq(0, 8000, 500),minor=seq(0, 8000, 100))+\n    theme(text =               element_text(size=5),\n          axis.title.x  = element_blank(),axis.title.y  = element_blank(),\n          legend.position=\"none\",axis.text.x= element_blank(),\n          plot.background = element_rect(fill = \"#8EB3BD\"),\n          axis.ticks.x = element_blank(),\n          axis.text.x = element_text(colour=\"#436974\"),axis.text.y = element_text(colour=\"#436974\"),\n          strip.background = element_rect(colour=\"#436974\", linetype=1),\n          line = element_line(colour = \"#436974\", linetype=1))\n    \n  \n  #print(p)\n  log_it('plot_summary_boxplot_main - end')\n  return(p)\n}\n\nbuild_snap_to_date_df <- function(){\n  DF_SNAP_ID_DATE_INT <- ddply(main$DF_MAIN, .(snap), summarise, \n                               end=min(as.POSIXct(end)),\n                               aas=sum(aas)) \n  DF_SNAP_ID_DATE_INT$end <- format(DF_SNAP_ID_DATE_INT$end,\"%y/%m/%d %H:%M\")\n  return(DF_SNAP_ID_DATE_INT)\n}\n\n\nplot_snap_id_list <- function(){\n  dateTable <- function(df){\n    df[is.na(df)] <- \"\"\n    return(tableGrob(df,show.rownames = FALSE, gpar.coretext = gpar(fontsize=6),gpar.coltext = gpar(fontsize=4),padding.v = unit(1, \"mm\"),padding.h = unit(2, \"mm\"),show.colnames = TRUE,col.just = \"left\", gpar.corefill = gpar(fill=NA,col=NA) ))\n    \n  }\n  \n  \n  snapIdDateText1 <- dateTable(main$DF_SNAP_ID_DATE2[c(seq(1,80)),])\n  snapIdDateText2 <- dateTable(main$DF_SNAP_ID_DATE2[c(seq(81,160)),])\n  snapIdDateText3 <- dateTable(main$DF_SNAP_ID_DATE2[c(seq(161,240)),])\n  snapIdDateText4 <- dateTable(main$DF_SNAP_ID_DATE2[c(seq(241,320)),])\n  snapIdDateText5 <- dateTable(main$DF_SNAP_ID_DATE2[c(seq(321,400)),])\n  snapIdDateText6 <- dateTable(main$DF_SNAP_ID_DATE2[c(seq(401,480)),])\n  snapIdDateText7 <- dateTable(main$DF_SNAP_ID_DATE2[c(seq(481,560)),])\n  #grid.newpage()\n  grid.arrange(snapIdDateText1,snapIdDateText2,snapIdDateText3,snapIdDateText4,snapIdDateText5,snapIdDateText6,snapIdDateText7,ncol = 7, widths=c(1,1,1,1,1,1,1))\n  \n}\n\nplot_sql_summary <- function(){\n  main$DF_SQL_SUMMARY$AVG_DOP <- main$DF_SQL_SUMMARY$PX_SERVERS_EXECS / main$DF_SQL_SUMMARY$EXECS\n  main$DF_SQL_SUMMARY$ELAP_PER_EXEC_M <- (main$DF_SQL_SUMMARY$ELAP / main$DF_SQL_SUMMARY$EXECS)/60\n  main$DF_SQL_SUMMARY$logRsGBperExec <- ((main$DF_SQL_SUMMARY$LOG_READS* 8)/main$DF_SQL_SUMMARY$EXECS)/1024/1024\n  main$DF_SQL_SUMMARY$ELAP <-  formatC(main$DF_SQL_SUMMARY$ELAP, digits=2,format=\"fg\", big.mark=\",\")\n  main$DF_SQL_SUMMARY$EXECS <-  formatC(main$DF_SQL_SUMMARY$EXECS, digits=2,format=\"fg\", big.mark=\",\")\n  main$DF_SQL_SUMMARY$LOG_READS <-  formatC(main$DF_SQL_SUMMARY$LOG_READS, digits=2,format=\"fg\", big.mark=\",\")\n  main$DF_SQL_SUMMARY$ELAP_PER_EXEC_M <-  formatC(main$DF_SQL_SUMMARY$ELAP_PER_EXEC_M, digits=2,format=\"fg\", big.mark=\",\")\n  main$DF_SQL_SUMMARY$AVG_DOP <-  formatC(main$DF_SQL_SUMMARY$AVG_DOP, digits=0,format=\"fg\", big.mark=\",\")\n  main$DF_SQL_SUMMARY$logRsGBperExec <-  formatC(main$DF_SQL_SUMMARY$logRsGBperExec, digits=2,format=\"fg\", big.mark=\",\")\n  \n  names(main$DF_SQL_SUMMARY)[names(main$DF_SQL_SUMMARY)==\"PARSING_SCHEMA_NAME\"] <- \"PARSING_SCHEMA\"\n  names(main$DF_SQL_SUMMARY)[names(main$DF_SQL_SUMMARY)==\"LOG_READS_RANK\"] <- \"logRsRank\"\n  names(main$DF_SQL_SUMMARY)[names(main$DF_SQL_SUMMARY)==\"PHYS_READS_RANK\"] <- \"physRsRank\"\n  #subset(df, select=-c(z,u))\n  sqlSummaryText1 <- tableGrob(subset(main$DF_SQL_SUMMARY, select=-c(PX_SERVERS_EXECS,LOG_READS)),show.rownames = FALSE, gpar.coretext = gpar(fontsize=7),gpar.coltext = gpar(fontsize=5),padding.v = unit(1, \"mm\"),padding.h = unit(2, \"mm\"),show.colnames = TRUE,col.just = \"left\", gpar.corefill = gpar(fill=NA,col=NA),h.even.alpha = 0 )\n  #print(sqlSummaryText1)\n  grid.arrange(sqlSummaryText1,ncol = 1, widths=c(1))\n}\n\nmain$overall_summary_df <- NULL\nmain$overall_combined_df <- NULL\nmain$DATA_FRAME <- NULL\nmain$DF_OS <- NULL\nmain$DF_MEMORY <- NULL\nmain$DF_MAIN <- NULL\nmain$DF_SNAP_ID_DATE <- NULL\nmain$DF_SNAP_ID_SUBSET <- NULL\nmain$DF_SNAP_ID_DATE2 <- NULL\nmain$gg_hour_bars <- NULL\nmain$cpu_cores <- NULL\nmain$current_db_name=\"\"\nmain$attributes_file=\"attributes.csv\"\nmain$plot_attributes <- NULL\nmain$current_plot_attributes <- NULL\n\nmain$foo <- vector()\n\nmain$mainFunction <- function(f){\n  \n  vector_element = which(main$db_id==f)\n  main$current_db_name=main$db_name[which(main$db_id==f)]\n  \n  main$DATA_FRAME <- NULL\n  main$DF_OS <- NULL\n  main$DF_MEMORY <- NULL\n  main$DF_MAIN <- NULL\n  main$DF_MAIN_BY_SNAP <- NULL\n  main$current_plot_attributes <- NULL\n  \n  main$current_plot_attributes <- load_plot_attributes()\n  apply_current_attributes()\n  \n  c(main$DF_OS, main$DF_MAIN,main$DF_MEMORY,main$DF_SPACE,main$DF_AAS,main$DF_SQL_SUMMARY,main$DF_SQL_BY_SNAPID,main$DF_SNAP_ID_DATE) := build_data_frames(f,main$current_db_name)\n  c(main$DF_MAIN_BY_SNAP) := summarise_dfs_by_snap()\n  main$DF_SNAP_ID_DATE2 <- build_snap_to_date_df()\n  \n  add_vetical_lines()\n  \n  if(length(main$current_plot_attributes)<2)\n    main$current_plot_attributes <- generate_plot_attributes()\n  \n  #print(head(main$DF_MAIN))\n  print(main$current_db_name)\n  #break\n\n  \n  main$DF_SNAP_ID_SUBSET <- generate_snap_id_labels(main$DF_SNAP_ID_DATE)\n  \n  if(is.na(get_os_stat(\"NUM_CPU_CORES\"))) main$num_cpu_cores <- get_os_stat(\"NUM_CPUS\") else main$num_cpu_cores <- get_os_stat(\"NUM_CPU_CORES\")\n  \n  main$cpu_cores <- main$num_cpu_cores*get_os_stat(\"INSTANCES\")\n  \n  main$gg_hour_bars <- generate_hours_bars(main$DF_MAIN)\n  \n  c(main$DF_SUMMARY_OS,main$DF_SUMMARY_MAIN,main$DF_SUMMARY_OVERALL) := gen_summary_data()\n  main$overall_summary_df <- rbind(main$overall_summary_df, main$DF_SUMMARY_OVERALL)\n  \n\n  #median_max_cpu <- median(main$DF_MAIN$os_cpu_max)\n  #print(plot_summary_boxplot_main(main$DF_MAIN,\"os_cpu_max\",median_max_cpu,\"OS CPU\"))\n  #box_cpu <- plot_summary_boxplot_main(main$DF_MAIN,\"os_cpu_max\",median_max_cpu,\"OS CPU\")\n  box_plots <- plot_summary_boxplot_main()\n  #print(box_plots)\n  c(aas_plot, aas_plot2_gt,aas_plot2_line) := plot_aas_chart(main$DF_AAS)\n  pdf(paste(main$current_db_name,\"-plot.pdf\",sep=\"\"), width = 11, height = 8.5,useDingbats=FALSE)\n  #tblText <- tableGrob(main$DF_OS,show.rownames = FALSE, gpar.coretext = gpar(fontsize=8),padding.v = unit(1, \"mm\"),padding.h = unit(2, \"mm\"),show.colnames = FALSE,col.just = \"left\")\n  log_it('tblText - start')\n  tblText <- tableGrob(main$DF_SUMMARY_OS,show.rownames = FALSE, gpar.coretext = gpar(fontsize=12),gpar.coltext = gpar(fontsize=8),padding.v = unit(1, \"mm\"),padding.h = unit(2, \"mm\"),show.colnames = TRUE,col.just = \"left\")\n  #tblText <- tableGrob(main$DF_SUMMARY_MAIN,show.rownames = FALSE, gpar.coretext = gpar(fontsize=12),gpar.coltext = gpar(fontsize=8),padding.v = unit(1, \"mm\"),padding.h = unit(2, \"mm\"),show.colnames = TRUE,col.just = \"left\")\n  log_it('tblText - end')\n  log_it('tblText2 - start')\n  tblText2 <- tableGrob(main$DF_SUMMARY_MAIN,show.rownames = FALSE, gpar.coretext = gpar(fontsize=10),gpar.coltext = gpar(fontsize=8),padding.v = unit(1, \"mm\"),padding.h = unit(2, \"mm\"),show.colnames = TRUE,col.just = \"left\")\n  #tblText2 <- tableGrob(main$DF_SUMMARY_OS,show.rownames = FALSE, gpar.coretext = gpar(fontsize=10),gpar.coltext = gpar(fontsize=8),padding.v = unit(1, \"mm\"),padding.h = unit(2, \"mm\"),show.colnames = TRUE,col.just = \"left\")\n  log_it('tblText2 - end')\n  \n  tblText3 <- tableGrob(subset(main$DF_OS,STAT_NAME == 'HOSTS'),show.rownames = FALSE, gpar.coretext = gpar(fontsize=8),gpar.coltext = gpar(fontsize=8),padding.v = unit(1, \"mm\"),padding.h = unit(2, \"mm\"),show.colnames = FALSE,col.just = \"left\")\n  #spaceText <- tableGrob(main$DF_SPACE,show.rownames = FALSE, gpar.coretext = gpar(fontsize=8),padding.v = unit(2, \"mm\"),padding.h = unit(2, \"mm\"),show.colnames = TRUE,col.just = \"left\")\n  #x <- grid.arrange(tblText, spaceText, ncol = 1, heights=c(2,5))\n  #str(tblText2)\n  dummy_df <- data.frame()\n    tryCatch(x <- grid.arrange(tblText,tblText2,tblText3, aas_plot2_line,box_plots, ncol = 1, heights=c(1,1,1,8,8)), \n             error = function(e) {\n               tryCatch(x <- grid.arrange(tblText,tblText2,tblText3, box_plots, ncol = 1, heights=c(1,1,1,8)), \n                        error = function(e) {\n                          x <- grid.arrange(tblText ,tblText2,tblText3, ncol = 1, heights=c(1,1,1))\n                        }\n               )\n             }\n    )\n  \n  #x <- grid.arrange(tblText,tblText2, aas_plot2_line,tblText, ncol = 1, heights=c(1,1,4,4))\n  #x <- grid.arrange(tblText, ncol = 1, heights=c(1))\n  #print(x)\n \n  log_it('printed x')\n  \n  cpu_plot <- plot_cpu(main$DF_MAIN)\n   io_plot <- plot_io(main$DF_MAIN_BY_SNAP)\n   \n  main_activity_plot <- plot_main_activity(main$DF_MAIN)\n  \n      tryCatch(RAC_activity_plot <- plot_RAC_activity(main$DF_MAIN), \n               error = function(e) {\n                #traceback()\n                 #print(paste0(\"Error in \",main$current_db_name,\": \",e))\n                 #browser()\n               }\n               #,finally=print(\"finished\")\n      )\n \n  \n   memory_plot <- plot_memory(main$DF_MEMORY)\n  \n  grid.newpage()\n  grid.draw(cpu_plot)\n  grid.newpage()\n  grid.draw(io_plot)\n  grid.newpage()\n  grid.draw(aas_plot)\n  grid.newpage()\n  grid.draw(aas_plot2_gt)\n  grid.newpage()\n  grid.draw(main_activity_plot)\n  grid.newpage()\n  tryCatch(\n    grid.draw(RAC_activity_plot), \n           error = function(e) {\n             #traceback()\n             #print(paste0(\"Error in \",main$current_db_name,\": \",e))\n             #browser()\n           }\n           #,finally=print(\"finished\")\n  )\n  print(memory_plot)\n  \n  #snapIdDateText1 <- tableGrob(main$DF_SNAP_ID_DATE2,show.rownames = FALSE, gpar.coretext = gpar(fontsize=6),gpar.coltext = gpar(fontsize=6),padding.v = unit(1, \"mm\"),padding.h = unit(2, \"mm\"),show.colnames = TRUE,col.just = \"left\")\n  \n # plot_snap_id_list()\n  \n#  plot_sql_summary()\n  \n  dev.off()\n  main$plot_attributes <- rbind(main$plot_attributes,main$current_plot_attributes)\n  #print(main$foo)\n}\n\n\n\nmain$mainLoop <- function(){\n  for (f in main$db_id) {\n    main$mainFunction(f)\n#     tryCatch(main$mainFunction(f), \n#              error = function(e) {\n#               #traceback()\n#                print(paste0(\"Error in \",main$current_db_name,\": \",e))\n#                #browser()\n#               \n#              }\n#              #,finally=print(\"finished\")\n#     )\n  }\n  write.csv(main$overall_summary_df,'OverallSummary.csv')\n  write.csv(main$plot_attributes,'attributes.csv',row.names=FALSE)\n}\n\nmain$mainLoop()\n\n",
    "created" : 1359644022851.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3391415817",
    "id" : "A370A70D",
    "lastKnownWriteTime" : 1359586847,
    "path" : "M:/Dropbox/MyFiles/GitHub/AWR-Miner/source/R-AWR-Mining.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}