<?xml version="1.0"?>
<project name="AWR-Miner" default="build" basedir="../">
  <!-- Sets variables which can later be used. -->
  <!-- The value of a property is accessed via ${} -->
  <property name="version.major" value="4.0"/>
  <property name="src.dir" location="source" />
  <property name="build.dir" location="build" />
  <property name="release.dir" location="release" />
  <property name="doc.dir" location="doc" />

  
   
    <macrodef name="git-tag-build">
        <sequential>
            <exec executable="git" dir=".">
                <arg value="tag" />
                <arg value="-a" />
                <arg value="${version.major}.${build.number}" />
                <arg value="-m" />
                <arg value="Generated by Ant Build" />
            </exec>
           <!--  
			<exec executable="git" dir=".">
                <arg value="push" />
                <arg value="tags" />
            </exec>
			
           <exec executable="git">
                <arg value="push" />
                <arg value="origin" />
                <arg value="refs/tags/${version.major}.${build.number}" />
            </exec>
		-->
        </sequential>
    </macrodef> 
	
    
	<macrodef name="git-push-tags">
        <sequential>
            
			<exec executable="git" dir=".">
                <arg value="push" />
                <arg value="-v" />
                <arg value="--tags" />
                <arg value="--progress" />
            </exec>
        </sequential>
    </macrodef> 
	
	
	
    <macrodef name="git-add-files">
        <element name="extArgs" />
        <attribute name="commitMsg" />
        <sequential>
            <exec executable="git" dir=".">
                <arg value="add" />
                <extArgs/>
            </exec>
            
            <exec executable="git">
                <arg value="commit" />
                <arg value="-m" />
                <arg value="${commitMsg}" />
            </exec>
        </sequential>
    </macrodef> 
	
	<macrodef name="git-checkout-file">
        <attribute name="file-name" />
        <sequential>
            <exec executable="git" dir=".">
                <arg value="fetch" />
            </exec>
            
            <exec executable="git">
                <arg value="checkout" />
                <arg value="origin" />
                <arg value="--" />
				<arg value="@{file-name}" />
            </exec>
        </sequential>
    </macrodef> 
       
  
	<macrodef name="pandoc-convert">
		<attribute name="input" />
		<attribute name="output" />
        <sequential>
			<exec executable="pandoc" dir=".">
                <arg line="--from=markdown_github " />
                <arg line="--standalone" />
				<arg line="-o @{output}" />
                <arg line="@{input}" />
            </exec>
        </sequential>
    </macrodef> 
  
    <target name="git-tag">
		<!-- <input message="Tag Name" addproperty="tagName" /> -->
		<git-tag-build />
	</target>
	
	<target name="git-push-tags">
		<!-- <input message="Tag Name" addproperty="tagName" /> -->
		<git-push-tags />
	</target>
  
  <!-- Deletes the existing build, docs and dist directory-->
  <target name="clean">
    <delete dir="${build.dir}" />
  </target>

  <!-- Creates the  build, docs and dist directory-->
  <target name="makedir" depends="clean">
    <mkdir dir="${build.dir}" />
    <mkdir dir="${build.dir}/capture" />
  </target>

  <target name="copy-to-build" depends="makedir">
    <copy file="${src.dir}/awr_miner.sql" todir="${build.dir}/capture" />
    <copy file="${doc.dir}/sample_output.zip" todir="${build.dir}/capture" />
    <copy file="${doc.dir}/readme_awr_miner.html" todir="${build.dir}/capture" />
    
    <copy file="${src.dir}/R-AWR-Mining.R" todir="${build.dir}" />
	<copy file="./readme.R-plots.html" todir="${build.dir}" />
  </target>
  
  
  <target name="updateBuildNumber">
		 <!-- increment the build number, if there is no file tracking the build number, 
		 this creates it and sets the build number to 0 -->
		<buildnumber file="ant/mybuild.number" />
		<echo>Build Number: ${build.number}</echo>
		<tstamp>
			<format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss" />
		</tstamp>
		<echo>Today: ${TODAY}</echo>
  </target>
  
  
  <target name="replace-version-num" depends="updateBuildNumber">
    <replaceregexp byline="true">
      <regexp pattern="^(define AWR_MINER_VER =).*"/>
      <substitution expression="\1 ${version.major}\.${build.number}"/>
      <fileset dir="${build.dir}/capture"> <include name="awr_miner.sql"/> </fileset>
    </replaceregexp>
    
    <replaceregexp byline="true">
      <regexp pattern="(AWR Miner) [0-9\.]+ (Readme)"/>
      <substitution expression="\1 ${version.major}\.${build.number} \2"/>
      <fileset dir="${build.dir}/capture"> <include name="readme_awr_miner.html"/> </fileset>
    </replaceregexp>
    
    <replaceregexp byline="true">
      <regexp pattern="^(awrMinerPlotVersion &lt;\-).+"/>
      <substitution expression="\1 \'${version.major}\.${build.number}\'"/>
      <fileset dir="${build.dir}"> <include name="R-AWR-Mining.R"/> </fileset>
    </replaceregexp>
	
	<replaceregexp byline="true">
      <regexp pattern="^(awrMinerPlotVersion &lt;\-).+"/>
      <substitution expression="\1 \'${version.major}\.${build.number}\'"/>
      <fileset dir="${src.dir}"> <include name="R-AWR-Mining.R"/> </fileset>
    </replaceregexp>
	
	
  </target>
  
 
    <target name="move-capture-dir">
        <property name="build.capture.subdir" value="AWR-Miner-capture-${version.major}.${build.number}" />
        <move file="${build.dir}/capture" tofile="${build.dir}/${build.capture.subdir}"/>
    </target>
    
    
    <target name="zip-capture-dir">
        <zip destfile="${build.dir}/AWR-Miner-Capture-${version.major}.${build.number}.zip">
          <zipfileset dir="${build.dir}">
             <include name="${build.capture.subdir}/**/**" />
          </zipfileset>
        </zip>
    </target>
    
    
    <target name="move-to-release-dir">
        <property name="release.subdir" value="${release.dir}/${version.major}.${build.number}" />
        <mkdir dir="${release.subdir}" />
        <move todir="${release.subdir}">
            <fileset dir="${build.dir}">
              <include name="**"/>
            </fileset>
        </move>
    </target>
    
    
    <target name="git-add-new-release">
        <input message="Commit Message:" addproperty="commitMsg" />
        <git-add-files commitMsg="${commitMsg}">
            <extArgs>
                <arg value="${release.subdir}/*" />
            </extArgs>
        </git-add-files>
    </target>

    
	
	
	
	<target name="git-checkout-README">
        <git-checkout-file file-name="README.md"  />
    </target>
	
	
	<target name="pandoc-convert-readme" depends="git-checkout-README">
        <pandoc-convert input="README.md" output="readme.R-plots.html" />
    </target>
	
  <target name="build" depends="pandoc-convert-readme,copy-to-build,updateBuildNumber,replace-version-num,move-capture-dir,zip-capture-dir,move-to-release-dir,git-add-new-release,git-tag,git-push-tags">
    <description>Build</description>
  </target>


</project> 